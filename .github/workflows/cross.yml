name: ezkl-lib-release
on:
  push:
    tags:
      - '*'
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-22.04

    outputs:
      upload_url: ${{ steps.release.outputs.upload_url}}
      ezkl_version: ${{ env.EZKL_VERSION }}

    steps:
      - name: Get release version from tag
        shell: bash
        if: env.EZKL_VERSION == ''
        run: |
          echo "EZKL_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.EZKL_VERSION }}"

      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN}}
        with:
          tag_name: ${{ env.EZKL_VERSION }}
          release_name: ${{ env.EZKL_VERSION }}

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env: 
      CARGO: cargo
      TARGET_FLAGS: ""
      TARGET_DIR: ./target
      RUST_BACKTRACE: 1
      PCRE2_SYS_STATIC: 1
    strategy:
      matrix:
        build: [linux, macos, win-msvc]
        include:
        - build: linux
          os: ubuntu-22.04
          rust: nightly
          target: x86_64-unknown-linux-musl
        - build: macos
          os: macos-13
          rust: nightly
          target: x86_64-apple-darwin
        - build: win-msvc
          os: windows-2023
          rust: nightly
          target: x86_64-pc-windows-msvc

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Install packages (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        ci/ubuntu-install-packages
      
    - name: Install packages (macOS)
      if: matrix.os == 'macos-13'
      run: |
        ci/macos-install-packages

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}

    - name: Use Cross
      shell: bash
      run: | 
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
        ECHO "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        ECHO "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"

    - name: Build release binary
      run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

    - name: Strip release binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: strip "target/${{ matrix.target }}/release/ezkl"

    - name: Build archive
      shell: bash
      run: |
        outdir="$(ci/cargo-out-dir "${{ env.TARGET_DIR }}")"
        staging="ripgrep-${{ needs.create-release.outputs.rg_version }}-${{ matrix.target }}"
        mkdir -p "$staging"/{complete,doc}

        cp {README.md,COPYING,UNLICENSE,LICENSE-MIT} "$staging/"
        cp {CHANGELOG.md,FAQ.md,GUIDE.md} "$staging/doc/"
        cp "$outdir"/{rg.bash,rg.fish,_rg.ps1} "$staging/complete/"
        cp complete/_rg "$staging/complete/"

        if [ "${{ matrix.os }}" = "windows-2023" ]; then
          cp "target/${{ matrix.target }}/release/rg.exe" "$staging/"
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          cp "$outdir"/rg.1 "$staging/doc/"
          cp "target/${{ matrix.target }}/release/rg" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi
        
    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN}}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url}}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream